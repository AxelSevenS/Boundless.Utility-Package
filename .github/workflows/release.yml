name: Publish Release

on:
  repository_dispatch:
    types: [release]

jobs:
  setup:
    if: ${{ github.event.client_payload.version }}
    name: Build and Create Release
    runs-on: ubuntu-latest
    outputs:
      release-url: ${{ steps.create-release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Restore dependencies
      run: dotnet restore

    - name: Create Release
      id: create-release
      uses: comnoco/create-release-action@v2.0.5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.client_payload.version }}
        release_name: v${{ github.event.client_payload.version }}
        draft: false
        prerelease: false

  build-and-publish:
    name: Publish ${{ matrix.project }} Release
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        project:
          - 'SevenDev.Boundless.Utility'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Find project file
      id: get-project
      run: |
        project=$(find ${{ matrix.project }} -type f -name "*.csproj")
        echo "path=$project" >> "$GITHUB_OUTPUT"

    - name: Get project version
      uses: bbonkr/get-version-action@v1
      id: get-version
      with:
        project: ${{ steps.get-project.outputs.path }}
        show_log_message: true

    - name: Build nuget Package
      run: |
        dotnet build \
          --configuration Release \
          --output ${{ matrix.project }}/nupkg \
          ${{ steps.get-project.outputs.path }}

    - name: Find package
      id: get-package
      run: |
        package=$(find ${{ matrix.project }}/nupkg -type f -name "*.nupkg")
        echo "path=$package" >> "$GITHUB_OUTPUT"
        echo "name=$(basename $package)" >> "$GITHUB_OUTPUT"


    - name: Publish to Nuget
      run: |
        dotnet nuget push "${{ steps.get-package.outputs.path }}" \
          --api-key "${{ secrets.NUGET_API_KEY }}" \
          --source "https://api.nuget.org/v3/index.json" --skip-duplicate

    - name: Publish asset to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.release-url }}
        asset_path: ${{ steps.get-package.outputs.path }}
        asset_name: ${{ steps.get-package.outputs.name }}
        asset_content_type: application/x-nupkg